#+title: Lecture 3: Simple Plots
#+author: Daniel Ballesteros-Ch√°vez
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.1 (Org mode 9.3.6)
#+PROPERTY: header-args :R+ :exports both
#+PROPERTY: header-args :R+ :session *R*
#+HTML_HEAD: <style type="text/css"> tr:nth-child(odd) {background-color: #e2e2e2;}  tr:first-child {font-weight: bold}  tr:hover {background-color: #d0c6e5;}</style>
#+HTML_HEAD_EXTRA: <style>code {background-color: #ccc}</style>
:results:
#+HTML_HEAD:<style>
#+HTML_HEAD:/* Daniel Ballesteros-Chavez */
#+HTML_HEAD:/* DBCh CSS for blog project */
#+HTML_HEAD:/* color schemes: #333745; #E63462 ; #C7EFCF ; #EEF5DB ; #909396; #262626;*/
#+HTML_HEAD:/* Modified version with responsive TOC
#+HTML_HEAD:
#+HTML_HEAD:/* usage: #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./style01.css"/> */
#+HTML_HEAD:
#+HTML_HEAD:body {
#+HTML_HEAD:	font-size: 18px;
#+HTML_HEAD:	color: #404040;
#+HTML_HEAD:	/* background-color: #333745; */
#+HTML_HEAD:	font-family: Helvetica;
#+HTML_HEAD:	line-height: 1.3;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:#content {
#+HTML_HEAD:	max-width: 50em;
#+HTML_HEAD:	margin-left: auto;
#+HTML_HEAD:	margin-right: auto;
#+HTML_HEAD:    padding: 15px 50px 50px 15px;
#+HTML_HEAD:    background-color: #E4F7FF;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:p {
#+HTML_HEAD:		text-align: justify;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:
#+HTML_HEAD:/* this part is about the table of contents TOC */
#+HTML_HEAD:
#+HTML_HEAD:#table-of-contents a:link,
#+HTML_HEAD:#table-of-contents a:visited {
#+HTML_HEAD:    color: #404040;
#+HTML_HEAD:    background: transparent;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:#table-of-contents a:hover {
#+HTML_HEAD:  background-color: #ccc;
#+HTML_HEAD:  color: #404040;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:
#+HTML_HEAD:#table-of-contents {
#+HTML_HEAD:    line-height: 1.2;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:#table-of-contents h2 {
#+HTML_HEAD:    background-color:  #ccc ;
#+HTML_HEAD:    padding-left: 0.3em;
#+HTML_HEAD:    color: #404040;
#+HTML_HEAD:    border-bottom: 0;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:#table-of-contents ul {
#+HTML_HEAD:    list-style: none;
#+HTML_HEAD:    padding-left: 0.3em;
#+HTML_HEAD:    font-weight: normal;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:
#+HTML_HEAD:#table-of-contents div>ul>li {
#+HTML_HEAD:    margin-top: 1em;
#+HTML_HEAD:    font-weight: bold;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:#table-of-contents .tag {
#+HTML_HEAD:    display: none;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:#table-of-contents .todo,
#+HTML_HEAD:#table-of-contents .done {
#+HTML_HEAD:    font-size: 80%;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:#table-of-contents ol>li {
#+HTML_HEAD:    margin-top: 1em;
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:@media screen {
#+HTML_HEAD:
#+HTML_HEAD:    #table-of-contents {
#+HTML_HEAD:        position: fixed;
#+HTML_HEAD:        top: 0;
#+HTML_HEAD:        left: 0;
#+HTML_HEAD:        padding: 1em 0 1em 1em;
#+HTML_HEAD:        width: 290px;
#+HTML_HEAD:        height: 100vh;
#+HTML_HEAD:        overlow-x: hidden;
#+HTML_HEAD:        overlow-y: auto;
#+HTML_HEAD:	overflow: auto;
#+HTML_HEAD:    }
#+HTML_HEAD:
#+HTML_HEAD:    #table-of-contents h2 {
#+HTML_HEAD:        margin-top: 0;
#+HTML_HEAD:        font-family: Helvetica,Arial,"Lucida Grande",sans-serif;
#+HTML_HEAD:    }
#+HTML_HEAD:
#+HTML_HEAD:    #table-of-contents code {
#+HTML_HEAD:        font-size: 12px;
#+HTML_HEAD:    }
#+HTML_HEAD:    
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:@media screen and (max-width: 95em) {
#+HTML_HEAD:
#+HTML_HEAD:    #table-of-contents {
#+HTML_HEAD:        display: none;
#+HTML_HEAD:    }
#+HTML_HEAD:
#+HTML_HEAD:    h1.title {
#+HTML_HEAD:        margin-left: 0%;
#+HTML_HEAD:    }
#+HTML_HEAD:    
#+HTML_HEAD:    div#content {
#+HTML_HEAD:        margin-left: 5%;
#+HTML_HEAD:        max-width: 90%;
#+HTML_HEAD:    }
#+HTML_HEAD:}
#+HTML_HEAD:
#+HTML_HEAD:/*Html Boxes around THMs and Propositions */
#+HTML_HEAD:.abstract  {
#+HTML_HEAD:    	color:  #404040;
#+HTML_HEAD:	border: 1px solid #404040;
#+HTML_HEAD:    box-shadow: 3px 3px 3px ;
#+HTML_HEAD:    padding: 8pt;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    margin: 1.2em;
#+HTML_HEAD:    position: relative;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    padding-top: 1.2em;
#+HTML_HEAD:	   }
#+HTML_HEAD:
#+HTML_HEAD:  .abstract:before {
#+HTML_HEAD:    display: inline;
#+HTML_HEAD:    position: absolute;
#+HTML_HEAD:    background-color: white;
#+HTML_HEAD:    top: -5px;
#+HTML_HEAD:    left: 10px;
#+HTML_HEAD:    padding: 3px;
#+HTML_HEAD:    border: 1px solid black;
#+HTML_HEAD:    content: 'Abstract';
#+HTML_HEAD:  }
#+HTML_HEAD:
#+HTML_HEAD:.mydef  {
#+HTML_HEAD:    	color:  #404040;
#+HTML_HEAD:    border: 1px solid #404040;
#+HTML_HEAD:    background-color: #FFD580;
#+HTML_HEAD:    /* box-shadow: 3px 3px 3px orange; */
#+HTML_HEAD:    padding: 8pt;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    margin: 1.2em;
#+HTML_HEAD:    position: relative;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    padding-top: 1.2em;
#+HTML_HEAD:	   }
#+HTML_HEAD:
#+HTML_HEAD:  .mydef:before {
#+HTML_HEAD:    display: inline;
#+HTML_HEAD:    position: absolute;
#+HTML_HEAD:    /* background-color: white; */
#+HTML_HEAD:    background-color: orange;
#+HTML_HEAD:    top: -5px;
#+HTML_HEAD:    left: 10px;
#+HTML_HEAD:    padding: 3px;
#+HTML_HEAD:    border: 1px solid black;
#+HTML_HEAD:    content: 'Definition';
#+HTML_HEAD:  }
#+HTML_HEAD:
#+HTML_HEAD:.prop  {
#+HTML_HEAD:    	color:  #404040;
#+HTML_HEAD:    border: 1px solid ;
#+HTML_HEAD:    background-color: #F1FFC2;
#+HTML_HEAD:    /* box-shadow: 3px 3px 3px green; */
#+HTML_HEAD:    padding: 8pt;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    margin: 1.2em;
#+HTML_HEAD:    position: relative;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    padding-top: 1.2em;
#+HTML_HEAD:	   }
#+HTML_HEAD:
#+HTML_HEAD:  .prop:before {
#+HTML_HEAD:    	color:  white;
#+HTML_HEAD:    display: inline;
#+HTML_HEAD:    position: absolute;
#+HTML_HEAD:    background-color: green;
#+HTML_HEAD:    top: -5px;
#+HTML_HEAD:    left: 10px;
#+HTML_HEAD:    padding: 3px;
#+HTML_HEAD:    border: 1px solid black;
#+HTML_HEAD:    content: 'Proposition';
#+HTML_HEAD:  }
#+HTML_HEAD:
#+HTML_HEAD:.thm  {
#+HTML_HEAD:    	color:  #404040;
#+HTML_HEAD:    border: 1px solid ;
#+HTML_HEAD:    background-color: lightcyan;
#+HTML_HEAD:    /* box-shadow: 3px 3px 3px brown; */
#+HTML_HEAD:    padding: 8pt;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    margin: 1.2em;
#+HTML_HEAD:    position: relative;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    padding-top: 1.2em;
#+HTML_HEAD:	   }
#+HTML_HEAD:
#+HTML_HEAD:  .thm:before {
#+HTML_HEAD:    	color:  white;
#+HTML_HEAD:    display: inline;
#+HTML_HEAD:    position: absolute;
#+HTML_HEAD:    background-color: darkblue;
#+HTML_HEAD:    top: -5px;
#+HTML_HEAD:    left: 10px;
#+HTML_HEAD:    padding: 3px;
#+HTML_HEAD:    border: 1px solid black;
#+HTML_HEAD:    content: 'Theorem';
#+HTML_HEAD:  }
#+HTML_HEAD:
#+HTML_HEAD:  .cor  {
#+HTML_HEAD:    	color:  #404040;
#+HTML_HEAD:    border: 1px solid blue;
#+HTML_HEAD:    box-shadow: 3px 3px 3px blue;
#+HTML_HEAD:    padding: 8pt;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    margin: 1.2em;
#+HTML_HEAD:    position: relative;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    padding-top: 1.2em;
#+HTML_HEAD:	   }
#+HTML_HEAD:
#+HTML_HEAD:  .cor:before {
#+HTML_HEAD:    display: inline;
#+HTML_HEAD:    position: absolute;
#+HTML_HEAD:    background-color: white;
#+HTML_HEAD:    top: -5px;
#+HTML_HEAD:    left: 10px;
#+HTML_HEAD:    padding: 3px;
#+HTML_HEAD:    border: 1px solid black;
#+HTML_HEAD:    content: 'Corollary';
#+HTML_HEAD:  }
#+HTML_HEAD:
#+HTML_HEAD:
#+HTML_HEAD:
#+HTML_HEAD:/*defaults form org-mode export */
#+HTML_HEAD:
#+HTML_HEAD:
#+HTML_HEAD:  .title  { text-align: center; }
#+HTML_HEAD:  .todo   { font-family: monospace; color: red; }
#+HTML_HEAD:  .done   { color: green; }
#+HTML_HEAD:  .tag    { background-color: #eee; font-family: monospace;
#+HTML_HEAD:            padding: 2px; font-size: 80%; font-weight: normal; }
#+HTML_HEAD:  .timestamp { color: #bebebe; }
#+HTML_HEAD:  .timestamp-kwd { color: #5f9ea0; }
#+HTML_HEAD:  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
#+HTML_HEAD:  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
#+HTML_HEAD:  .center { margin-left: auto; margin-right: auto; text-align: center; }
#+HTML_HEAD:  .underline { text-decoration: underline; }
#+HTML_HEAD:  #postamble p, #preamble p { font-size: 90%; margin: .2em; text-align: center;}
#+HTML_HEAD:  p.verse { margin-left: 3%; }
#+HTML_HEAD:  pre {
#+HTML_HEAD:    border: 1px solid #ccc;
#+HTML_HEAD:    box-shadow: 3px 3px 3px #eee;
#+HTML_HEAD:    padding: 8pt;
#+HTML_HEAD:    font-family: monospace;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    margin: 1.2em;
#+HTML_HEAD:  }
#+HTML_HEAD:  pre.src {
#+HTML_HEAD:    position: relative;
#+HTML_HEAD:    overflow: auto;
#+HTML_HEAD:    padding-top: 1.2em;
#+HTML_HEAD:  }
#+HTML_HEAD:  pre.src:before {
#+HTML_HEAD:    display: none;
#+HTML_HEAD:    position: absolute;
#+HTML_HEAD:    background-color: white;
#+HTML_HEAD:    top: -10px;
#+HTML_HEAD:    right: 10px;
#+HTML_HEAD:    padding: 3px;
#+HTML_HEAD:    border: 1px solid black;
#+HTML_HEAD:  }
#+HTML_HEAD:  pre.src:hover:before { display: inline;}
#+HTML_HEAD:  pre.src-sh:before    { content: 'sh'; }
#+HTML_HEAD:  pre.src-bash:before  { content: 'sh'; }
#+HTML_HEAD:  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
#+HTML_HEAD:  pre.src-R:before     { content: 'R'; }
#+HTML_HEAD:  pre.src-perl:before  { content: 'Perl'; }
#+HTML_HEAD:  pre.src-java:before  { content: 'Java'; }
#+HTML_HEAD:  pre.src-sql:before   { content: 'SQL'; }
#+HTML_HEAD:
#+HTML_HEAD:  table { border-collapse:collapse; }
#+HTML_HEAD:  caption.t-above { caption-side: top; }
#+HTML_HEAD:  caption.t-bottom { caption-side: bottom; }
#+HTML_HEAD:  td, th { vertical-align:top;  }
#+HTML_HEAD:  th.right  { text-align: center;  }
#+HTML_HEAD:  th.left   { text-align: center;   }
#+HTML_HEAD:  th.center { text-align: center; }
#+HTML_HEAD:  td.right  { text-align: right;  }
#+HTML_HEAD:  td.left   { text-align: left;   }
#+HTML_HEAD:  td.center { text-align: center; }
#+HTML_HEAD:  dt { font-weight: bold; }
#+HTML_HEAD:  .footpara:nth-child(2) { display: inline; }
#+HTML_HEAD:  .footpara { display: block; }
#+HTML_HEAD:  .footdef  { margin-bottom: 1em; }
#+HTML_HEAD:  .figure { padding: 1em; }
#+HTML_HEAD:  .figure p { text-align: center; }
#+HTML_HEAD:  .inlinetask {
#+HTML_HEAD:    padding: 10px;
#+HTML_HEAD:    border: 2px solid gray;
#+HTML_HEAD:    margin: 10px;
#+HTML_HEAD:    background: #ffffcc;
#+HTML_HEAD:  }
#+HTML_HEAD:  #org-div-home-and-up
#+HTML_HEAD:   { text-align: right; font-size: 70%; white-space: nowrap; }
#+HTML_HEAD:  textarea { overflow-x: auto; }
#+HTML_HEAD:  .linenr { font-size: smaller }
#+HTML_HEAD:  .code-highlighted { background-color: #ffff00; }
#+HTML_HEAD:  .org-info-js_info-navigation { border-style: none; }
#+HTML_HEAD:  #org-info-js_console-label
#+HTML_HEAD:    { font-size: 10px; font-weight: bold; white-space: nowrap; }
#+HTML_HEAD:  .org-info-js_search-highlight
#+HTML_HEAD:    { background-color: #ffff00; color: #000000; font-weight: bold; }
#+HTML_HEAD:
#+HTML_HEAD:</style>
:end:


# #+html: <a href="https://www.codecogs.com/eqnedit.php?latex=\sum_{i=1}^n&space;(x_i&space;-&space;\bar{x})^2" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\sum_{i=1}^n&space;(x_i&space;-&space;\bar{x})^2" title="\sum_{i=1}^n (x_i - \bar{x})^2" /></a>
# #+html: <p align="center"> <img src="https://render.githubusercontent.com/render/math?math=x_{1,2} = \frac{-b \pm \sqrt{b^2-4ac}}{2b}"></p>
# #+html: <p align="left"> <img src="https://render.githubusercontent.com/render/math?math= \sin^2(x) + \cos^2(x) =1"></p>
# #+html: <a href="https://www.codecogs.com/eqnedit.php?latex=\sin^2(x)&space;&plus;&space;\cos^2(x)&space;=1" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\sin^2(x)&space;&plus;&space;\cos^2(x)&space;=1" title="\sin^2(x) + \cos^2(x) =1" /></a>


# * Introduction.

# The linear model and the least squares is a very simple and powerful prediction method.
# In this section we will aim to fully understand it and how the data can fit the best possible linear equation by minimising a suitable error function.

# Through out the discussion, all vectors in $\mathbb{R}^n$ will be thought of as a column vector, and if $X\in \mathbb{R}^n$, then
# $X^T$ denotes its transpose, i.e., $X^T = (x_1, x_2, \ldots, x_n)$, where $x_i\in \mathbb{R}$.

# * The Linear Model

# Given a *vector* $X^T = (x_1, x_2, \ldots, x_p)$, we want to predict the *real value* $Y$, using the linear model
# \[ \hat(Y)  = \hat{\beta}_0 + \sum_{j = 1}^p x_j\hat{\beta}_j,\]
# where
# + $\hat{Y}$ is the estimated value of $Y$.

# + $\hat{\beta}_0$ is called the /intercept/.

# It is possible to write this equation in terms of the usual inner product in $\mathbb{R}^{p}$, for instance, consider the vectors
# $X^T = (x_1,\ldtos,x_p)$ and $\hat{\beta} = (\beta_1,\dots,\beta_p)$, then the inner product is defined as the sum of the product of the same entries of the vectors:
# \[ \langle X, \hat{\beta} \rangle = x_1 \beta_1 + x_2 \beta_2 + \cdots \x_p \beta_p. \]
# Note that in matrix notation it is equivalent to the expression
# \[\hat{Y}= X^T \hat{\beta}, \] 
# where this is the product of a $1\times n$ matrix with a $n \times 1$ matrix, resulting into a real number.

# ** Geometric Interpretation

# With all this considerations we are able to write the linear model as 
# \begin{equation}
#  \hat{Y}  = \hat{\beta}_0 + X^T \hat{\beta}.
# \label{lm01}
# \end{equation}

# In this case $(X^T, \hat{Y}) is an affine hyperplane cutting the $Y$-axis at the point $(0,\hat{\beta}_0)$.

# We can simplyfy a bit more. Instead of considering vectors in $\mathbb{R}^p$, we can add one more coordinate and work in $\mathbb{R}^{p+1}$. If 
# we write $\bar{X}^T = (1, X^T) = (1, x_1, \ldots, x_p)$ and $\hat{\beta} = (\beta_0, \beta_1, \ldots, \beta_p)$, then the linear model can be 
# expressed simply as
# \begin{equaiton}
#  \hat{Y} = \bar{X}^T \hat{\beta}. 
# \label{lm02}
# \end{equation}

# In this case $(X^T, \hat{Y})$ is a hyperplane including the origin.




#   - Estimating the Coefficients 
#   - Assessing the Accuracy of the Coefficient Estimates 
#   - Assessing the Accuracy of the Model
#   - Comparison of Linear Regression with K-Nearest neighbours

* Probability distributions in R

One convenient use of R is to provide a comprehensive set of
statistical tables. Functions are provided to evaluate the cumulative
distribution function 
\begin{equation}
P(X \leq x), 
\end{equation}

the probability density function and
the quantile function: given $q$, the smallest $x$ such that 
\begin{equation}
P(X \leq x) > q ,
\end{equation}

 and to simulate from the distribution.

| Distribution                   | Functions |           |           |           |
|--------------------------------+-----------+-----------+-----------+-----------|
| /                              | <         |           |           | >         |
| Beta                           | pbeta     | qbeta     | dbeta     | rbeta     |
| Binomial                       | pbinom    | qbinom    | dbinom    | rbinom    |
| Cauchy                         | pcauchy   | qcauchy   | dcauchy   | rcauchy   |
| Chi-Square                     | pchisq    | qchisq    | dchisq    | rchisq    |
| Exponential                    | pexp      | qexp      | dexp      | rexp      |
| F                              | pf        | qf        | df        | rf        |
| Gamma                          | pgamma    | qgamma    | dgamma    | rgamma    |
| Geometric                      | pgeom     | qgeom     | dgeom     | rgeom     |
| Hypergeometric                 | phyper    | qhyper    | dhyper    | rhyper    |
| Logistic                       | plogis    | qlogis    | dlogis    | rlogis    |
| Log Normal                     | plnorm    | qlnorm    | dlnorm    | rlnorm    |
| Negative Binomial              | pnbinom   | qnbinom   | dnbinom   | rnbinom   |
| Normal                         | pnorm     | qnorm     | dnorm     | rnorm     |
| Poisson                        | ppois     | qpois     | dpois     | rpois     |
| Student t                      | pt        | qt        | dt        | rt        |
| Studentized Range              | ptukey    | qtukey    | dtukey    | rtukey    |
| Uniform                        | punif     | qunif     | dunif     | runif     |
| Weibull                        | pweibull  | qweibull  | dweibull  | rweibull  |
| Wilcoxon Rank Sum Statistic    | pwilcox   | qwilcox   | dwilcox   | rwilcox   |
| Wilcoxon Signed Rank Statistic | psignrank | qsignrank | dsignrank | rsignrank |

Prefix the name given here by ~d~ for the density, ~p~ for the CDF,
~q~ for the quantile function and ~r~ for simulation (random deviates)

*Example 1* To compute $P(X < 30)$ when $X$ is normal with mean $55$ and standard deviation $15$. 

#+begin_src R :results output :exports both
pnorm(30, mean=55, sd=15)
#+end_src

#+RESULTS:
: 0.0477903522728147

*Example 2* To compute $P(X > 30)$ when $X$ is normal with mean $55$ and standard deviation $15$. 

#+begin_src R :results output :exports both
1 - pnorm(30, mean=55, sd=15)
#+end_src

#+RESULTS:
: 0.952209647727185

*Example 3* To compute 90 percentile  when $X$ is normal with mean $55$ and standard deviation $15$. 

#+begin_src R :results output :exports both
qnorm(.9, mean=55, sd = 15)
#+end_src

#+RESULTS:
: 74.223273483169

*Example 4* To *simulate* $n = 10$ observations normally with mean $55$ and standard deviation $15$. 

#+begin_src R :results output :exports both
rnorm(10, mean=55, sd = 15)
#+end_src

#+RESULTS:
| 68.5486212969529 |
| 69.4746985186583 |
| 64.2088256057422 |
| 30.4674174748002 |
|  54.579843379504 |
| 76.9585268208811 |
| 24.2911211206573 |
| 58.1964144995452 |
| 64.1227403679861 |
| 58.2984398234332 |

* The Distribution of the data set.

How to identify the distribution of your data? This is a common and important question when analysiing data. 


Examining the distribution of a set of data

Given a (univariate) set of data we can examine its distribution in a
large number of ways. The simplest is to examine the numbers. Two
slightly different summaries are given by summary and fivenum and a
display of the numbers by stem (a ‚Äústem and leaf‚Äù plot).



#+begin_src R :results output :exports both
summary(iris$Sepal.Length)
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   4.300   5.100   5.800   5.843   6.400   7.900

#+begin_src R :results output :exports both
fivenum(iris$Sepal.Length)
#+end_src

#+RESULTS:
: [1] 4.3 5.1 5.8 6.4 7.9

A simple table of frequencies can be obtained by

#+begin_src R :results output :exports both
data.frame(table(iris$Sepal.Length))
#+end_src

#+RESULTS:
#+begin_example
   Var1 Freq
1   4.3    1
2   4.4    3
3   4.5    1
4   4.6    4
5   4.7    2
6   4.8    5
7   4.9    6
8     5   10
9   5.1    9
10  5.2    4
11  5.3    1
12  5.4    6
13  5.5    7
14  5.6    6
15  5.7    8
16  5.8    7
17  5.9    3
18    6    6
19  6.1    6
20  6.2    4
21  6.3    9
22  6.4    7
23  6.5    5
24  6.6    2
25  6.7    8
26  6.8    3
27  6.9    4
28    7    1
29  7.1    1
30  7.2    3
31  7.3    1
32  7.4    1
33  7.6    1
34  7.7    4
35  7.9    1
#+end_example



* Histograms

A stem-and-leaf plot is  also donne in R with the function ~stem~

#+begin_src R :results output :exports both
stem(iris$Sepal.Length)
#+end_src

#+RESULTS:
#+begin_example

  The decimal point is 1 digit(s) to the left of the |

  42 | 0
  44 | 0000
  46 | 000000
  48 | 00000000000
  50 | 0000000000000000000
  52 | 00000
  54 | 0000000000000
  56 | 00000000000000
  58 | 0000000000
  60 | 000000000000
  62 | 0000000000000
  64 | 000000000000
  66 | 0000000000
  68 | 0000000
  70 | 00
  72 | 0000
  74 | 0
  76 | 00000
  78 | 0
#+end_example

Another simple example is the following
#+begin_src R :results output :exports both
stem(c(1,1,2,2.3,4,5,6.7,6,6,7.3))
#+end_src

#+RESULTS:
: 
:   The decimal point is at the |
: 
:   0 | 00
:   2 | 03
:   4 | 00
:   6 | 0073


R has a function ~hist~ to plot *histograms*. 

~hist(iris$Sepal.Length)~

The parameter ~freq~ is a logical parameter.  If TRUE, the histogram graphic is a representation of
frequencies, the counts component of the result; if FALSE, probability
densities, component density, are plotted (so that the histogram has a
total area of one). Defaults to TRUE if and only if breaks are
equidistant (and probability is not specified).

~hist(iris$Sepal.Length, freq=FALSE)~

*Kernel Density Estimation*. Let $(x_1, x_2, ..., x_n)$ be independent and identically distributed
samples drawn from some univariate distribution with an unknown
density $f$ at any given point $x$. *We are interested in estimating theshape of this function* $f$. 
Its *kernel density estimator* is

\begin{equation}
{f}_{h}(x)={\frac {1}{n}}\sum _{i=1}^{n}K_{h}(x-x_{i})={\frac {1}{nh}}\sum _{i=1}^{n}K{\Big (}{\frac {x-x_{i}}{h}}{\Big )}
\end{equation}

     The generic function ~density~ computes kernel density
     estimates. 
     The algorithm used disperses the mass of the
     empirical distribution function over a regular grid of at least
     512 points and then uses the fast Fourier transform to convolve
     this approximation with a discretized version of the kernel and
     then uses linear approximation to evaluate the density at the
     specified points.


#+begin_example R
x <- iris$Sepal.Length
hist(x, freq=FALSE, ylim=c(0,0.6))  ## note that here I had to adjust the limits for the yaxis.
lines(density(x,bw=0.1))
#+end_example

Finally we can also add a *rug* representation of the data

#+begin_example R
x <- iris$Sepal.Length
hist(x, freq=FALSE, ylim=c(0,0.55),col="lightblue")  ## note that here I had to adjust the limits for the yaxis.
lines(density(x,bw=0.1))
rug(x,col="red")
#+end_example
 
We can plot the *empirical cumulative distribution function* by using the function ~ecdf~
#+begin_example R
x <- iris$Sepal.Length
plot(ecdf(x), do.points=FALSE, verticals=TRUE)
#+end_example


* Plotting in R


** Plot a function

Now we will use the basic plot function oin R to plot graphs.

Lets plot the sine function.

First we need to provide a range ov values for the domain of the function. In this case, we will plot the function from -2\pi to 2\pi.

#+begin_src R 
X <- seq(-2*pi, 2*pi, by = 0.2)
#+end_src


Then we run the plot command as follows:

#+begin_src R 
X <- seq(-2*pi, 2*pi, by = 0.2)
plot(sin,X)
#+end_src

Then the plot is shown in a different window.


What if the function we want to plot is not a built in function?

Suppose we want to plot the function

f(x) = 2x^2 / (x^2 + 1),

Then we have

#+begin_src R 
F <- function(x){ 
2*x^2 / (x^2 + 1)}

X <- seq(-10, 10, by = 0.2)
plot(F,X)
#+end_src


* Plot from data frame (scatter plot)

It may happen that the function is not given, and instead we are given the corresponding values in a data frame:

#+begin_src R 
df <- data.frame(
"x-axis" = c(
-5.0 ,-4.8, -4.6 ,-4.4 ,-4.2 ,-4.0 ,-3.8 ,-3.6 ,-3.4 ,-3.2 ,-3.0 ,-2.8 ,-2.6 ,-2.4 ,-2.2,
-2.0 ,-1.8, -1.6 ,-1.4 ,-1.2 ,-1.0 ,-0.8 ,-0.6 ,-0.4 ,-0.2 , 0.0 , 0.2 , 0.4 , 0.6 , 0.8,
 1.0 , 1.2,  1.4 , 1.6 , 1.8 , 2.0 , 2.2 , 2.4 , 2.6 , 2.8 , 3.0 , 3.2 , 3.4 , 3.6 , 3.8,
 4.0 , 4.2,  4.4 , 4.6 , 4.8 , 5.0),
"f_x" = c(
-6.73076923 ,-6.51713810 ,-6.30216606 ,-6.08565815 ,-5.86738197 ,-5.64705882,
-5.42435233 ,-5.19885387 ,-4.97006369 ,-4.73736655 ,-4.50000000 ,-4.25701357,
-4.00721649 ,-3.74911243 ,-3.48082192 ,-3.20000000 ,-2.90377358 ,-2.58876404,
-2.25135135 ,-1.88852459 ,-1.50000000 ,-1.09268293 ,-0.68823529 ,-0.33103448,
-0.08461538 , 0.00000000 ,-0.06923077 ,-0.22068966 ,-0.37058824 ,-0.46829268,
-0.50000000 ,-0.47213115 ,-0.39729730 ,-0.28764045 ,-0.15283019 , 0.00000000,
 0.16575342 , 0.34082840 , 0.52268041 , 0.70950226 , 0.90000000 , 1.09323843,
 1.28853503 , 1.48538682 , 1.68341969 , 1.88235294 , 2.08197425 , 2.28212181,
 2.48267148 , 2.68352745 , 2.88461538)
)

plot(df)
#+end_src


In this case, a line is not drawn, in order to include the line and to modify it we can use the parameters =type= and =lwd=

#+begin_src 
plot(df, type="l", lwd=4)
#+end_src


One can read a bit more of this on the help page for plot:

  #+begin_example
  ‚Äòtype‚Äô what type of plot should be drawn.  Possible types are

                ‚Ä¢ ‚Äò"p"‚Äô for *p*oints,

                ‚Ä¢ ‚Äò"l"‚Äô for *l*ines,

                ‚Ä¢ ‚Äò"b"‚Äô for *b*oth,

                ‚Ä¢ ‚Äò"c"‚Äô for the lines part alone of ‚Äò"b"‚Äô,

                ‚Ä¢ ‚Äò"o"‚Äô for both ‚Äò*o*verplotted‚Äô,

                ‚Ä¢ ‚Äò"h"‚Äô for ‚Äò*h*istogram‚Äô like (or ‚Äòhigh-density‚Äô)
                  vertical lines,

                ‚Ä¢ ‚Äò"s"‚Äô for stair *s*teps,

                ‚Ä¢ ‚Äò"S"‚Äô for other *s*teps, see ‚ÄòDetails‚Äô below,

                ‚Ä¢ ‚Äò"n"‚Äô for no plotting.

              All other ‚Äòtype‚Äôs give a warning or an error; using,
              e.g., ‚Äòtype = "punkte"‚Äô being equivalent to ‚Äòtype = "p"‚Äô
              for S compatibility.  Note that some methods, e.g.
              ‚Äòplot.factor‚Äô, do not accept this.

          ‚Äòmain‚Äô an overall title for the plot: see ‚Äòtitle‚Äô.

          ‚Äòsub‚Äô a sub title for the plot: see ‚Äòtitle‚Äô.

          ‚Äòxlab‚Äô a title for the x axis: see ‚Äòtitle‚Äô.

          ‚Äòylab‚Äô a title for the y axis: see ‚Äòtitle‚Äô.

          ‚Äòasp‚Äô the y/x aspect ratio, see ‚Äòplot.window‚Äô.
  #+end_example




To add color we can use the following syntax

#+begin_src 
plot(df, type="l", lwd=4, col="#3498db")
#+end_src

If we want to add a title then we write

=plot(df, type ="l", lwd = 4, col = "#3498db", main = "Graph of the function from a table")=



If we come back to the sine function, and take a look at the following commands

#+begin_example R
X <- seq(-pi, pi, by = 0.2)
plot(sin,X)
plot(X,sin(X))
plot(sin(X),X)
#+end_example


Here and illustration of different types
#+begin_src R
par(mfrow = c(1, 3))
plot(X, sin(X), type = "l", main = "type = 'l'")
plot(X, sin(X), type = "s", main = "type = 's'")
plot(X, sin(X), type = "p", main = "type = 'p'")

par(mfrow = c(1, 1)) ## set it back to the default value
#+end_src

And here we have an example of different =pch=. The pch argument
allows to modify the symbol of the points in the plot. The main
symbols can be selected passing numbers 1 to 25 as parameters. You can
also change the symbols size with the cex argument and the line width
of the symbols (except 15 to 18) with the lwd argument

     #+begin_example R
X <- seq(-pi, pi, by = 0.2)
plot(X,sin(X), pch=1:25, cex=2)
     #+end_example

The symbols 21 to 25 allow you to set border width and
background color with the lwd and bg arguments.

     #+begin_example R
X <- seq(-pi, pi, by = 0.2)
plot(X,sin(X), pch=21:25, cex=2, lwd=1:3,bg=c("blue","red","green"))
     #+end_example

Now we can define the following plot function
#+begin_src 
X <- seq(-pi, pi, by = 0.2)
plot(X,sin(X),
main="The graph of Sine function",
ylab = "sin(x)",
xlab = "x",
col="#3498db",
type="l",
lwd="3"
)
#+end_src


Maybe a useful thing is to define the grid

#+begin_example R
X <- seq(-pi, pi, by = 0.2)
plot(X,sin(X),
main="The graph of Sine function",
ylab = "sin(x)",
xlab = "x",
col="#3498db",
type="l",
lwd="3"
)
abline(v=X,col="grey80",lty=3)
abline(h=seq(min(sin(X)),max(sin(X)),length.out=length(X)),col="grey80",lty=3)
abline(v=0,h=0,col="grey10")
#+end_example

Can we go further?


     #+begin_example
     ‚Äòpar‚Äô can be used to set or query graphical parameters.
     Parameters can be set by specifying them as arguments to ‚Äòpar‚Äô in
     ‚Äòtag = value‚Äô form, or by passing them as a list of tagged values.
     #+end_example


Yes, we can change for instance the default font

#+begin_example R
X <- seq(-pi, pi, by = 0.2)
par(family="mono",fg="grey10")
plot(X,sin(X),
main="The graph of Sine function",
ylab = "sin(x)",
xlab = "x",
col="#3498db",
type="l",
lwd="3"
)
abline(v=X,col="grey80",lty=3)
abline(h=seq(min(sin(X)),max(sin(X)),length.out=length(X)),col="grey80",lty=3)
abline(v=0,h=0,col="grey10")

dev.off() ## this will reset the default values changed in par()
#+end_example


finally when we like one particular plot type we can save it as a personal function

#+begin_example R
my_plot1 <- function(x,y,color="#3498db",ylabel="f(x)",xlabel="x",my.title="Plot title",...){
par(family="mono",fg="grey10") 
plot(x,y,
main=my.title,
ylab = ylabel,
xlab = xlabel,
col= color,
type= "l",
lwd="3"
)
abline(v=x,col="grey80",lty=3)
abline(h=seq(min(y),max(y),length.out=length(x)),col="grey80",lty=3)
abline(v=0,h=0,col="grey10")
}
#+end_example



+ Create the function my_plot1, my_plot2, my_plot3 for plot of functions, histograms and boxplots. Save them in to an R file called my_Rtools.R
+ A good source of examples can be found here: https://r-coder.com/plot-r/
+ There is a popular package for nice plots named ggplot2. Download
  the package and try to do some plots there too. Note that the syntax is way different, for instance, you can try: =ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()=


